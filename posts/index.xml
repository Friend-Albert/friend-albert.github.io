<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>所有文章 - FriendA&#39;s Blog</title>
        <link>https://friend-albert.github.io/posts/</link>
        <description>所有文章 | FriendA&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 23 Aug 2022 00:57:00 &#43;0800</lastBuildDate><atom:link href="https://friend-albert.github.io/posts/" rel="self" type="application/rss+xml" /><item>
    <title>设计模式：建造者&amp;原型模式</title>
    <link>https://friend-albert.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E5%88%9B%E9%80%A0%E8%80%85%E5%8E%9F%E5%9E%8B/</link>
    <pubDate>Tue, 23 Aug 2022 00:57:00 &#43;0800</pubDate><guid>https://friend-albert.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E5%88%9B%E9%80%A0%E8%80%85%E5%8E%9F%E5%9E%8B/</guid>
    <description><![CDATA[建造者模式 假设通过如下方式创建对象： public class ResourcePoolConfig { private static final int DEFAULT_MAX_TOTAL = 8; private static final int DEFAULT_MAX_IDLE = 8; private static final int DEFAULT_MIN_IDLE = 0; private String name; private int maxTotal = DEFAULT_MAX_TOTAL; private int maxIdle = DEFAULT_MAX_IDLE; private int minIdle = DEFAULT_MIN_IDLE; //..省略部分成]]></description>
</item>
<item>
    <title>设计模式：工厂模式</title>
    <link>https://friend-albert.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Mon, 22 Aug 2022 22:49:00 &#43;0800</pubDate><guid>https://friend-albert.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[工厂模式 一般情况下，工厂模式分为三种更加细分的类型：简单工厂、工厂方法和抽象工厂。不过，在 GoF 的《设计模式》一书中，它将简单工厂模式看作是工厂]]></description>
</item>
<item>
    <title>设计模式：单例模式</title>
    <link>https://friend-albert.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Fri, 19 Aug 2022 19:56:00 &#43;0800</pubDate><guid>https://friend-albert.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[单例模式 为什么要使用单例？ 单例设计模式（Singleton Design Pattern）理解起来非常简单。一个类只允许创建一个对象（或者实例），那这个类]]></description>
</item>
<item>
    <title>设计原则与思想：规范与重构（下）</title>
    <link>https://friend-albert.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E8%A7%84%E8%8C%83%E4%B8%8E%E9%87%8D%E6%9E%84%E4%B8%8B/</link>
    <pubDate>Wed, 17 Aug 2022 16:44:00 &#43;0800</pubDate><guid>https://friend-albert.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E8%A7%84%E8%8C%83%E4%B8%8E%E9%87%8D%E6%9E%84%E4%B8%8B/</guid>
    <description><![CDATA[设计原则与思想：规范与重构（下） 命名与注释（Naming and Comments） 命名多长最合适？ 对于一些默认的、大家都比较熟知的词，我比较推荐用]]></description>
</item>
<item>
    <title>设计原则与思想：规范与重构（上）</title>
    <link>https://friend-albert.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E8%A7%84%E8%8C%83%E4%B8%8E%E9%87%8D%E6%9E%84%E4%B8%8A/</link>
    <pubDate>Wed, 17 Aug 2022 14:29:00 &#43;0800</pubDate><guid>https://friend-albert.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E8%A7%84%E8%8C%83%E4%B8%8E%E9%87%8D%E6%9E%84%E4%B8%8A/</guid>
    <description><![CDATA[设计原则与思想：规范与重构（上） 理论一：什么情况下要重构？到底重构什么？又该如何重构？ 1. 重构的目的：为什么重构（why）？ 对于项目来言，重构]]></description>
</item>
<item>
    <title>设计原则与思想：设计原则（下）</title>
    <link>https://friend-albert.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8B/</link>
    <pubDate>Mon, 15 Aug 2022 22:19:00 &#43;0800</pubDate><guid>https://friend-albert.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8B/</guid>
    <description><![CDATA[设计原则（下） 理论六：我为何说KISS、YAGNI原则看似简单，却经常被用错？ KISS 原则 Keep It Simple and Stupid. Keep It Short and Simple. Keep It Simple and Straightforward. 该如何定义“简单”的代码？]]></description>
</item>
<item>
    <title>设计原则与思想：设计原则（上）</title>
    <link>https://friend-albert.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8A/</link>
    <pubDate>Mon, 15 Aug 2022 20:19:00 &#43;0800</pubDate><guid>https://friend-albert.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8A/</guid>
    <description><![CDATA[设计原则（上） 理论一：对于单一职责原则，如何判定某个类的职责是否够“单一”？ **SOLID 原则——单一职责原则、开闭原则、里式替换原则、接口隔离原则和依]]></description>
</item>
<item>
    <title>设计原则与思想：面向对象（下）</title>
    <link>https://friend-albert.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3%E4%B8%8B/</link>
    <pubDate>Sun, 14 Aug 2022 12:13:00 &#43;0800</pubDate><guid>https://friend-albert.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3%E4%B8%8B/</guid>
    <description><![CDATA[面向对象思想实战 业务开发常用的基于贫血模型的MVC架构违背OOP吗？ MVC架构代码分析 ////////// Controller+VO(View Object) ////////// public class UserController { private UserService userService; //通过构造函数或者IOC框架注]]></description>
</item>
<item>
    <title>设计原则与思想：面向对象（中）</title>
    <link>https://friend-albert.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3%E4%B8%AD/</link>
    <pubDate>Fri, 12 Aug 2022 21:19:00 &#43;0800</pubDate><guid>https://friend-albert.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3%E4%B8%AD/</guid>
    <description><![CDATA[设计原则与思想：面向对象（中） 理论五：接口vs抽象类的区别？如何用普通的类模拟抽象类和接口？ 抽象类 抽象类不允许被实例化，只能被继承。也就是说]]></description>
</item>
<item>
    <title>设计原则与思想：面向对象（上）</title>
    <link>https://friend-albert.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3%E4%B8%8A/</link>
    <pubDate>Thu, 11 Aug 2022 21:19:00 &#43;0800</pubDate><guid>https://friend-albert.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%80%9D%E6%83%B3%E4%B8%8A/</guid>
    <description><![CDATA[设计原则与思想：面向对象（上） 理论一：当谈论面向对象的时候，我们到底在谈论什么？ 面向对象编程是一种编程范式或编程风格。它以类或对象作为组织代]]></description>
</item>
</channel>
</rss>
