<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>创建型模式 - 标签 - FriendA&#39;s Blog</title>
        <link>https://friend-albert.github.io/tags/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/</link>
        <description>创建型模式 - 标签 - FriendA&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 23 Aug 2022 00:57:00 &#43;0800</lastBuildDate><atom:link href="https://friend-albert.github.io/tags/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/" rel="self" type="application/rss+xml" /><item>
    <title>设计模式：建造者&amp;原型模式</title>
    <link>https://friend-albert.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E5%88%9B%E9%80%A0%E8%80%85%E5%8E%9F%E5%9E%8B/</link>
    <pubDate>Tue, 23 Aug 2022 00:57:00 &#43;0800</pubDate><guid>https://friend-albert.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E5%88%9B%E9%80%A0%E8%80%85%E5%8E%9F%E5%9E%8B/</guid>
    <description><![CDATA[建造者模式 假设通过如下方式创建对象： public class ResourcePoolConfig { private static final int DEFAULT_MAX_TOTAL = 8; private static final int DEFAULT_MAX_IDLE = 8; private static final int DEFAULT_MIN_IDLE = 0; private String name; private int maxTotal = DEFAULT_MAX_TOTAL; private int maxIdle = DEFAULT_MAX_IDLE; private int minIdle = DEFAULT_MIN_IDLE; //..省略部分成]]></description>
</item>
<item>
    <title>设计模式：工厂模式</title>
    <link>https://friend-albert.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Mon, 22 Aug 2022 22:49:00 &#43;0800</pubDate><guid>https://friend-albert.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[工厂模式 一般情况下，工厂模式分为三种更加细分的类型：简单工厂、工厂方法和抽象工厂。不过，在 GoF 的《设计模式》一书中，它将简单工厂模式看作是工厂]]></description>
</item>
<item>
    <title>设计模式：单例模式</title>
    <link>https://friend-albert.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Fri, 19 Aug 2022 19:56:00 &#43;0800</pubDate><guid>https://friend-albert.github.io/posts/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F_%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[单例模式 为什么要使用单例？ 单例设计模式（Singleton Design Pattern）理解起来非常简单。一个类只允许创建一个对象（或者实例），那这个类]]></description>
</item>
</channel>
</rss>
